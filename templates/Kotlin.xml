<templateSet group="Kotlin">
  <template name="pv" value="private val " description="private val" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="blocking" value="runBlocking { $SELECTION$ }" description="Run blocking" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_EXPRESSION" value="true" />
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="json" value="&#10;    @FromJson&#10;    fun to$NAME$(raw: $TYPE$) = $NAME$(raw)&#10;&#10;    @ToJson&#10;    fun from$NAME$(wrapped: $NAME$) = wrapped.value&#10;" description="Moshi Json Adapter" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="invoke" value="operator fun invoke() {}" description="invoke operator" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="dbuc" value="class $NAME$(private val database: Database, private val context: CoroutineContext) {&#10;    &#10;    suspend operator fun invoke() = withContext(context) {&#10;        database.$OPERATION$&#10;    }&#10;}&#10;&#10;" description="Use case to perform database operation" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="OPERATION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_CLASS" value="true" />
      <option name="KOTLIN_TOPLEVEL" value="true" />
    </context>
  </template>
</templateSet>